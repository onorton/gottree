<head>
<title>House <%=  @house %></title>
</head>

<h1><%= @house %> Family Tree</h1>
<svg width="1000" height="500" ></svg>
<%= tag(:object, id: "tree", data: image_path(@house+"_family_tree.svg"), type: "image/svg+xml", target: "_blank") %>

<style>


text {
	  font: 10px sans-serif;
	    pointer-events: none;
}

.links line {
	  stroke: #999;
	    stroke-opacity: 0.6;
}

</style>
<script>
var house =  '<%=@house%>'
$.ajax({
	   type: "GET",
           contentType: "application/json; charset=utf-8",
	   url: 'display?name='+house,
           dataType: 'json',
           success: function (data) {
		                  draw(data);
				             },
           error: function (result) {
		                  console.log("error");
				             }
       });
 
function draw(data) {
	console.log(data)
	var svg = d3.select("svg"),
	        width = +svg.attr("width"),
		    height = +svg.attr("height");

	var color = d3.scaleOrdinal(d3.schemeCategory20);

	var nodes = data.people.map(function(p) {
			return {"id": p.id, "name": p.name, "value": 5}
			})
	var links = []
	data.people.forEach(function(p) {
			var relationships = data.relationships.filter(function(r) {
					return r.person_1 == p.id
					})
			relationships.forEach(function(r) {
				nodes.push({"id": p.id + ' ' + r.person_2, "value": 1})
				links.push({"source": p.id, "target": p.id + ' ' + r.person_2})
				links.push({"source": r.person_2, "target": p.id + ' ' + r.person_2})
			})	
			})
	data.people.forEach(function(p) {
				var parents = data.relationships.filter(function(r) {
					return (r.person_1 == p.father  && r.person_2 == p.mother)|| (r.person_2 == p.father && r.person_1 == p.mother)
					})
				if (parents.length == 1) {
					links.push({"source":p.id, "target": parents[0].person_1 + ' ' + parents[0].person_2})
				}
			})
	

var simulation = d3.forceSimulation()
	    .force("link", d3.forceLink().id(function(d) { return d.id; }))
	        .force("charge", d3.forceManyBody())
		    .force("center", d3.forceCenter(width / 2, height / 2));
  var link = svg.append("g")
        .attr("class", "links")
	    .selectAll("path")
	        .data(links)
		    .enter().append("path")
		          .attr("stroke-width", function(d) { return 1; })
			  .attr("fill", "none")
			  .attr("stroke", "black")
	   var node = svg.append("g")
	         .attr("class", "nodes")
		     .selectAll("circle")
		         .data(nodes)
			     .enter().append("circle")
			     .attr("r", function(d) {return d.value})
         node.append("text")
		       .attr("dx", 12)
		             .attr("dy", ".35em")
			           .text(function(d) { return d.name });
  function elbow(d, i) { 
			console.log(d.source)	  
			return "M" + d.source.x + "," + d.source.y
			           + "V" + d.target.y + "H" + d.target.x;
	   }
	simulation
	 .nodes(nodes)
	 .on("tick", ticked) 
simulation.force("link")
.links(links)

	   function ticked() {
		    link
			         .attr("d", elbow)
		          node
				          .attr("cx", function(d) { return d.x; })
					          .attr("cy", function(d) { return d.y; });
			    }
}
var tree = document.getElementById('tree')
tree.style.width = (window.innerWidth) + "px"
tree.style.height = (window.innerHeight * 0.78) + "px"

var beforePan

beforePan = function(oldPan, newPan){
    var stopHorizontal = false, 
    stopVertical = false, 
    gutterWidth = window.innerWidth*0.1, 
    gutterHeight = window.innerHeight*0.1, 

    sizes = this.getSizes(), 
    leftLimit = -((sizes.viewBox.x + sizes.viewBox.width) * sizes.realZoom) + gutterWidth,
    rightLimit = sizes.width - gutterWidth - (sizes.viewBox.x * sizes.realZoom), 
    topLimit = -((sizes.viewBox.y + sizes.viewBox.height) * sizes.realZoom) + gutterHeight,
    bottomLimit = sizes.height - gutterHeight - (sizes.viewBox.y * sizes.realZoom)

    customPan = {}
    customPan.x = Math.max(leftLimit, Math.min(rightLimit, newPan.x))
    customPan.y = Math.max(topLimit, Math.min(bottomLimit, newPan.y))

    return customPan
}


document.getElementById('tree').addEventListener('load', function(){
  svgPanZoom(document.getElementById('tree'), {
          zoomEnabled: true,
          controlIconsEnabled: false,
          maxZoom: 5,
          minZoom: 1,
          beforePan: beforePan
        }); 
})
</script>


