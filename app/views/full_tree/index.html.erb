
<head>
<title>ASOIAF Family Tree</title>
</head>

<h1>ASOIAF Family Tree</h1>
<svg id="t"  width="1000" height="1000" ></svg>

<style>


text {
	  font: 12px sans-serif;
	    pointer-events: none;
}

.links line {
	  stroke: #999;
	    stroke-opacity: 0.6;
}

</style>
<script>
var house =  '<%=@house%>'
$.ajax({
	   type: "GET",
           contentType: "application/json; charset=utf-8",
	   url: '/',
           dataType: 'json',
           success: function (data) {
		                  draw(data);
				             },
           error: function (result) {
		                  console.log("error");
				             }
       });

function stringDividerQuote(str, width) {
	if (str == null) {
		return ""
	}

	lines = str.split('\n')
	result = ''
	lines.forEach(function(l) {
			for (i = 0; i < l.length; i++) {
				if (l[i] == ':') {
					break
				}
			}
			if (i < l.length) {
				l = l.slice(0, i+2) + "\"" + l.slice(i+2)
			} else {
				l = "\"" + l
			}	
			l += "\""
			result += stringDivider(l, width) + '\n'
		})
	return result
	
}
function stringDivider(str, width) {
		if (str == null){
			return ""
		}
	    if (str.length>width) {
		var p=width
		for (;p>0 && str[p]!=' ';p--) {
		}
		if (p>0) {
			var left = str.substring(0, p);
			var right = str.substring(p+1);
			return left + '\n' + stringDivider(right, width, '\n');
		}
	}
	   return str;
}
function draw(data) {	
	houseColours = {
		"Stark":{"background": "#CCCCCC", "text": "#000000"},
		"Tully":{"background": "#0000A0", "text": "#FFFFFF"},
		"Baratheon":{"background": "#FFFF00", "text": "#000000"},
		"Lannister":{"background": "#800000", "text": "#FFFFFF"},
		"Tyrell":{"background": "#008000", "text": "#FFFF00"},
		"Arryn":{"background": "#5B91FF",  "text": "#FFFFFF"},
		"Martell":{"background": "#FFA500", "text": "#800000"},
		"Greyjoy":{"background": "#101010", "text": "#FFA500"},
		"Targaryen":{"background":"#101010", "text": "#FF0000"}

	}
	houseLocations = {
		"Stark":2,
		"Tully":1,
		"Baratheon":4,
		"Lannister":3,
		"Tyrell":7,
		"Arryn":0,
		"Martell":6,
		"Greyjoy":8,
		"Targaryen":5,
		"Frey": 9

	}
	houses = []
	for(var k in data.houses) {
		if (data.houses.hasOwnProperty(k) && k != "NULL") {
			houses.push({"type":"house","id":k, "count": data.houses[k], "colour":houseColours[k]})
		}

	}
	var svg = d3.select("svg"),
	        width = +svg.attr("width"),
		    height = +svg.attr("height");
	


	var color = d3.scaleOrdinal(d3.schemeCategory20);

	var nodes = data.people.map(function(p) {
			return {"id": p.id, 
				"name": p.name, 
				"colour" : houseColours[p.house] , 
				"location": (houseLocations[p.house] === undefined)? 500 : 1000 + houseLocations[p.house]*1000,
				"dates": dates(p), 
				"link": p.wiki_link, 
				"value": 1, 
				"father": (p.father == 0) ? {} : p.father, 
				"mother": (p.mother == 0) ? {} : p.mother, 
				"description": stringDivider(p.description, 50),
				"titles": (p.titles != null) ? p.titles : "", 
				"allegiances": (p.allegiances != null ) ? p.allegiances : "",
				"culture": (p.culture != null) ? p.culture : "",
				"quote": stringDividerQuote(p.quote, 50),
				"house":p.house,
				"type":"character"
				}
			})

	links = []
	data.people.forEach(function(p) {
			var relationships = data.relationships.filter(function(r) {
					return r.person_1 == p.id
					})
			relationships.forEach(function(r) {

				nodes.push({"type":"character","id": p.id + ' ' + r.person_2, "value": 0})
				links.push({"type":"character","source": p.id, "target": p.id + ' ' + r.person_2, "legitimate": r.legitimate})
				links.push({"type":"character","source": r.person_2, "target": p.id + ' ' + r.person_2, "legitimate": r.legitimate})
			})	
			})
	data.people.forEach(function(p) {
				var parents = data.relationships.filter(function(r) {
					return (r.person_1 == p.father  && r.person_2 == p.mother)|| (r.person_2 == p.father && r.person_1 == p.mother)
					})
				if (parents.length == 1) {
					links.push({"type":"character","target":p.id, "source": parents[0].person_1 + ' ' + parents[0].person_2, "legitimate": parents[0].legitimate})
				}
	
				})

	houseRelationships = data.relationships.map(function(r) {
			return nodes.filter(function(n) {return n.id == r.person_1 || n.id == r.person_2}).map(function(n) {return n.house})
	
	})
	var houseLinks = []
	houses.forEach(function(house) { 
		otherHouses = houses.filter(function(h) {
			return house.id != h.id
		})
		linksForHouse = otherHouses.map(function(otherHouse) {
			count = houseRelationships.filter(function(r) {return r.includes(house.id) && r.includes(otherHouse.id)}).length
			if (count > 0 && !houseLinks.includes({"source":otherHouse.id, "target":house.id, "count": count})) {
				return {"type":"house","source":house.id, "target":otherHouse.id, "count": count}
			}

		}).filter(function(l) {return l !== undefined})

		houseLinks = houseLinks.concat(linksForHouse)
	})
	displayedNodes = houses
	displayedLinks = houseLinks
var simulation = d3.forceSimulation()
	    .force("link", d3.forceLink().id(function(d) { return d.id; }))
	    .force("charge", d3.forceManyBody())
	    .force("collide", d3.forceCollide(function(d) {return Math.sqrt(d.count) * 30}))
	    .force("center", d3.forceCenter(width/2, height/2))
	update()    
function update() {



	
	svg.select(".links").remove()
	svg.select(".nodes").remove()		
	linkGroup = svg.append("g")
	   .attr("class", "links")
	
	

	nodeGroup = svg.append("g")
	   .attr("class", "nodes")
	

	

	linkGroup.selectAll("link").data(displayedLinks).enter().append("g").attr("class", function(l) {return l.type + "_link"})
	nodeGroup.selectAll("node").data(displayedNodes).enter().append("g").attr("class", function(l) {return l.type + "_node"})


	houseLinks = svg.selectAll(".house_link")
	houseLink = houseLinks.append("line")
		    .attr("stroke-width", function(l) {return 5*l.count})

	characterLinks = svg.selectAll(".character_link")
	characterLink = characterLinks.append("path")	
		    	.attr("stroke-width", 1)
			.attr("stroke-dasharray",function(l) {return (l.legitimate == 1) ? "1, 0": "5, 5" })
			  .attr("fill", "none")
			  .attr("stroke","black")
			  .attr("id", function(l) {return l.source + ',' + l.target})	

	houseNode = svg.selectAll(".house_node") 
	


	var circle = houseNode.append("circle")
	.attr("r", function(d){return 15*Math.sqrt(d.count)})
	.attr("stroke", "black")
	.attr("fill", function(d) {return (d.colour === undefined) ? "white" : d.colour.background})
			     .attr("stroke-width", 2)
			     .attr("id", function(d){return d.id})
			     .on("mouseover", highlightHouseTies)
			     .on("mouseout", resetHouseTies)
			     .on("click", expand)
	var houseLabel =  houseNode.append("text")
			.attr("text-anchor", "middle")
			.text(function(d) { return d.id })
			.attr("fill", function(d) {return (d.colour === undefined) ? "black": d.colour.text})

	characterNode = svg.selectAll(".character_node")
	rectWidth = 145;
	rectHeight = 45;
	var rect = characterNode.append("rect")
	.attr("width", function(d){return d.value*rectWidth})
	.attr("height", function(d){return d.value*rectHeight})

	.attr("stroke", "black")
			     .attr("fill", function(d) {return (d.colour === undefined) ? "white" : d.colour.background})
			     .attr("stroke-width", 2)
			     .attr("id", function(d){return d.id})
			     .on("mouseover", highlightNeighbours)
			     .on("click", function(d) {window.open("http://awioaf.westeros.org/index.php/"+d.link, '_blank')})
			     .on("mouseout", reset)
			     .on("contextmenu", function(d) {window.open("/character/display?id="+d.link, '_blank')})
	var label =  characterNode.append("text")
			.attr("text-anchor", "middle")
			.text(function(d) { return d.name })
			.attr("fill", function(d) {return (d.colour === undefined) ? "black": d.colour.text})
	var dates = characterNode.append("text")
			.attr("text-anchor", "middle")
			.text(function(d) { return d.dates})
			.attr("fill", function(d) {return (d.colour === undefined) ? "black": d.colour.text})
	

	simulation
	 .nodes(displayedNodes)
	 .on("tick", ticked) 
simulation.force("link")
.links(displayedLinks)
	function ticked() {
			circle
			.attr("cx", function(d) { 
					return d.x 	
					})
					          .attr("cy", function(d) { return d.y });
				label.attr("x", function(d) { return d.x; })
					.attr("y", function(d) { return d.y;})
					
			houseLink.attr("x1", function(l) {return l.source.x})
				.attr("y1", function(l) {return l.source.y})
				.attr("x2", function(l) {return l.target.x})
				.attr("y2", function(l) {return l.target.y})
			characterLink.attr("d", elbow)
			rect
			.attr("x", function(d) { 
					return d.x-rectWidth/2; 	
					})
					          .attr("y", function(d) { return d.y-rectHeight/2; });
				label.attr("x", function(d) { return d.x; })
					.attr("y", function(d) { return d.y;})
				dates.attr("x", function(d) { return d.x; })
					.attr("y", function(d) { return d.y+12;})
				houseLabel.attr("x", function(d) { return d.x; })
					.attr("y", function(d) { return d.y;})

	}


}
	var description = svg.append("g")
	.attr("visibility", "hidden")			
	description.append("rect")
		.attr("width", 300)
		.attr("height", 500)
		.attr("fill", "white")
		.attr("stroke", "black")
		.attr("stroke-width", 2)

	var characterName = description.append("text")
	.attr("text-anchor", "middle")
	.attr("fill", "black")
	.attr("x", 150)
	.attr("y", 20)
	var characterTitles = description.append("text")
	.attr("fill", "black")
	.attr("x", 10)
	.attr("y", 40)
	var characterAllegiances = description.append("text")
	.attr("x", 10)
	var characterCulture = description.append("text")
	.attr("x", 10)
	var characterDescription = description.append("text")
	.attr("x", 10)
	var characterQuote = description.append("text")
	.attr("text-anchor", "middle")
	.attr("x", 10)

function expand(house) {

	peopleOfHouse = nodes.filter(function(n) {return n.house == house.id})
	peopleOfHouse.forEach(function(n) {
		n.x = house.x
		n.y = house.y
	})
	peopleIds = peopleOfHouse.map(function(p) {return p.id})		
		displayedNodes = displayedNodes.concat(peopleOfHouse)
	nodeIds = displayedNodes.map(function(n) {return n.id})
	intermediateNodesOfHouse = nodes.filter(function(n) {
			if (isNaN(n.id)) {
				ids = n.id.split(" ")
				return nodeIds.includes(parseInt(ids[0])) && nodeIds.includes(parseInt(ids[1]))
			} 
			return false
			})
	displayedNodes = displayedNodes.concat(intermediateNodesOfHouse)
	displayedLinks = displayedLinks.concat(links.filter(function(l) {return peopleIds.includes(l.source) || peopleIds.includes(l.target)}))
	nodeIds = displayedNodes.map(function(n) {return n.id})
	peopleIds.forEach(function(id) {
			otherIds = data.relationships.filter(function(r) {return r.person_1 == id || r.person_2 == id}).map(function(r) {return (r.person_1 == id) ? r.person_2 : r.person_1}).filter(function(otherId) {return !nodeIds.includes(otherId) })
		otherIds.forEach(function(otherId) {
				
			houseName = nodes.filter(function(n) {return n.id == otherId}).map(function(n) {return n.house})
			console.log(houseName)
			if (houseName.length > 0 && houseName[0] != "NULL") {
				displayedLinks.push({"type":"house", "count": 1, "source":id, "target":houseName[0]})
				
			}	
		})
	})


	console.log(displayedLinks)
		// remove house links
	displayedNodes = displayedNodes.filter(function(n) {return n.id != house.id})
	displayedLinks = displayedLinks.filter(function(l) {return !((l.source.id !== undefined && l.source.id == house.id) || (l.target.id !== undefined && l.target.id == house.id))}) 
	update()
}
function highlightHouseTies(d) {
	var neighbours = displayedLinks.filter(function(l) {return l.source.id == d.id || l.target.id == d.id}).map(function(l) {if (d.id == l.source.id) {return l.target.id} else {return l.source.id}})
	neighbours.push(d.id)	
	var marriageLinks = displayedLinks.filter(function(l) {return l.source.id == d.id || l.target.id == d.id}).map(function(l) {return l.source.id + " " + l.target.id})
	svg.selectAll('circle').filter(function(n) {return neighbours.includes(n.id)}).style('stroke-width', 4)
	svg.selectAll('line').filter(function(l) {return marriageLinks.includes(l.source.id + " " + l.target.id)}).style('stroke', "black")
}
function resetHouseTies(d) {
	var neighbours = displayedLinks.filter(function(l) {return l.source.id == d.id || l.target.id == d.id}).map(function(l) {if (d.id == l.source.id) {return l.target.id} else {return l.source.id}})
	neighbours.push(d.id)	
	var marriageLinks = displayedLinks.filter(function(l) {return l.source.id == d.id || l.target.id == d.id}).map(function(l) {return l.source.id + " " + l.target.id})
	svg.selectAll('circle').filter(function(n) {return neighbours.includes(n.id)}).style('stroke-width', 2)
	svg.selectAll('line').filter(function(l) {return marriageLinks.includes(l.source.id + " " + l.target.id)}).style('stroke', "gray")
}

function highlightNeighbours(d) {
	var neighbours = immediateFamily(d)
		svg.selectAll('rect').filter(function(n) {if (n===undefined) {return false } else {return neighbours.includes(n.id)}}).style('stroke-width', 4)
	var linksWithNodes = svg.selectAll('path').filter(function(p) {return neighbours.includes(p.source.id) || neighbours.includes(p.target.id)})	
	var linksConnectingNodes = linksWithNodes.filter(function(p) {
			if (neighbours.includes(p.source.id)) {
			return linksWithNodes.filter(function(l) {return l.source.id == p.target.id || l.target.id == p.target.id   })._groups[0].length > 1
			} else {

			return linksWithNodes.filter(function(l) {return l.source.id == p.source.id || l.target.id == p.source.id   })._groups[0].length > 1
			}
	})
	pt = document.getElementById('t').createSVGPoint()
	clientRect = document.getElementById('t').getBoundingClientRect()
	pt.x = -clientRect.left + 10
	pt.y = (clientRect.top > -10) ? 0 : -clientRect.top + 10
	description.attr("visibility", "visible").attr("transform", "translate(" + pt.x + "," + pt.y + ")")
	characterName.text(d.name)
	linksConnectingNodes.style('stroke-width', 2)
	var offset = 40
	description.attr("visibility", "visible")
	characterName.text(d.name)
	titles = d.titles.split('\n')
	if (d.titles != "") {
		characterTitles.text("Titles:")
	}
	titles.forEach(function(t) {
		characterTitles.append("tspan")
		.attr("dy", 10)
		.attr("x", 20)
		.text(t)
		})
	offset += 10 * (titles.length + 2) 
	allegiances = d.allegiances.split('\n')

	characterAllegiances.attr("y", offset)
	if (d.allegiances != "") {
		characterAllegiances.text("Allegiances:")
	}
	allegiances.forEach(function(a) {
		characterAllegiances.append("tspan")
		.attr("dy", 10)
		.attr("x", 20)
		.text(a)
	})
	offset += 10 * (allegiances.length + 2)
	characterCulture.attr("y", offset)
	if (d.culture != "") {	
		characterCulture.text("Culture: " + d.culture)
		offset += 10
	}
	characterDescription.attr("y", offset) 
	descriptionLines = d.description.split('\n')
	descriptionLines.forEach(function(l) {
		characterDescription.append("tspan")
		.attr("dy", 10)
		.attr("x", 5)
		.text(l)
	})
	offset += 10 * (descriptionLines.length + 2)
	characterQuote.attr("y", offset)
	quoteLines = d.quote.split('\n')
	quoteLines.forEach(function(l) {
		characterQuote.append("tspan")
		.attr("dy", 10)
		.attr("font-style", "italic")
		.text(l)
		.attr("x", 150)	
		})
	offset += 10 * (quoteLines.length+2)
	description.select("rect").attr("height", offset)	
	linksConnectingNodes.style('stroke-width', 2)
}

function reset(d) {
	var neighbours = immediateFamily(d)
		svg.selectAll('rect').filter(function(n) {if (n === undefined) {return false} else {return neighbours.includes(n.id)}}).style('stroke-width', 2)
	var linksWithNodes = svg.selectAll('path').filter(function(p) {return neighbours.includes(p.source.id) || neighbours.includes(p.target.id)})
	var linksConnectingNodes = linksWithNodes.filter(function(p) {
			if (neighbours.includes(p.source.id)) {
			return linksWithNodes.filter(function(l) {return l.source.id == p.target.id   })._groups.length > 0
			} else {
			return linksWithNodes.filter(function(l) {return p.source.id == l.target.id   })._groups.length > 0
			}
	})

	description.attr("visibility", "hidden")
	characterDescription.html("")
	characterTitles.html("")
	characterAllegiances.html("")
	characterQuote.html("")
	characterCulture.text("")
	linksConnectingNodes.style('stroke-width', 1)

}

function immediateFamily(d) {
	var neighbours = [d.id]
	neighbours = neighbours.concat(nodes.filter(function(n) {return d.father == n.id || d.mother == n.id}).map(function(n) {return n.id}))
	neighbours = neighbours.concat(nodes.filter(function(n) {return n.father == d.id || n.mother == d.id}).map(function(n) {return n.id}))
	neighbours = neighbours.concat(data.relationships.filter(function(r) {return r.person_1 == d.id || r.person_2 == d.id}).map(function(r) {if (r.person_1 == d.id) {return r.person_2} else {return r.person_1} }))
	neighbours= neighbours.concat(nodes.filter(function(n) {return n.father == d.father || n.mother == d.mother}).map(function(n) {return n.id}))
	return neighbours
}
function elbow(d, i) {
       			if (!isNaN(d.source.id)) {	
			return "M" + d.source.x + "," + d.source.y
				+ "V" + d.target.y + "H" + d.target.x;
			} else {
				return "M" + d.target.x + "," + d.target.y
					+ "V" +  (d.target.y + (d.source.y-d.target.y)/2) + "H" + d.source.x + "V" + d.source.y;
			}
}
function dates(p) {
	result = '';
	if (p.year_of_birth > 0) {
		result += p.year_of_birth;
	} else if (p.year_of_birth == -1) {
		result += '???';
	}
	result += '-';
	if (p.year_of_death > 0) {
		result += p.year_of_death
	} else if (p.year_of_death == -1) {
		result += '???'
	}
	return result
}


	var zoom = d3.zoom()
		    .scaleExtent([0.1, 5])
			    .on("zoom", zoomed);
	function zoomed() {
		svg.selectAll(".nodes").attr("transform", d3.event.transform);
		svg.selectAll(".links").attr("transform", d3.event.transform);
	}
	svg.call(zoom)
}
var tree = d3.select("svg")
tree.attr("width", window.innerWidth)
   .attr("height", window.innerHeight * 0.78)

</script>


